package codegen

import (
	"bytes"
	"fmt"
	"os"
	"path/filepath"
	"strings"
	"text/template"

	"github.com/lazygophers/codegen/state"
	"github.com/lazygophers/log"
	"github.com/lazygophers/utils/candy"
	"github.com/lazygophers/utils/osx"
	"github.com/pterm/pterm"
)

func GenerateDoc(pb *PbPackage) (err error) {
	pterm.Info.Println("try generate documentation")

	// 获取文档输出目录
	outputDir := "docs"
	if state.Config.DocOutputDir != "" {
		outputDir = state.Config.DocOutputDir
	}
	docsDir := filepath.Join(pb.ProjectRoot(), outputDir)
	if !osx.IsDir(docsDir) {
		err = os.MkdirAll(docsDir, 0755)
		if err != nil {
			log.Errorf("failed to create docs directory: %v", err)
			return err
		}
	}

	// 收集所有以 Model 开头的 message
	var modelMessages []*PbMessage
	candy.Each(pb.Messages(), func(message *PbMessage) {
		if strings.HasPrefix(message.Name, "Model") {
			modelMessages = append(modelMessages, message)
			log.Infof("found model message: %s", message.FullName)
		}
	})

	if len(modelMessages) == 0 {
		pterm.Warning.Println("no Model-prefixed messages found")
		return nil
	}

	// 准备模板数据
	data := map[string]interface{}{
		"Models":      modelMessages,
		"PackageName": pb.PackageName(),
		"ProtoFile":   pb.ProtoFileName(),
		"GoPackage":   pb.GoPackage(),
	}

	// 生成数据库设计文档
	err = generateDatabaseDesignDoc(docsDir, data)
	if err != nil {
		log.Errorf("failed to generate database design doc: %v", err)
		return err
	}

	pterm.Success.Println("documentation generated successfully")
	return nil
}

func generateDatabaseDesignDoc(docsDir string, data map[string]interface{}) error {
	// 获取当前语言环境，优先支持中文
	lang := state.Config.Language
	if lang == "" {
		lang = "zh"
	}

	// 根据语言选择文件名和模板
	var fileName, templateContent string
	if lang == "zh" {
		fileName = "数据库设计.md"
		templateContent = getDatabaseDesignTemplateZh()
	} else {
		fileName = "database-design.md"
		templateContent = getDatabaseDesignTemplateEn()
	}

	// 解析并执行模板
	tmpl, err := template.New("databaseDesign").Parse(templateContent)
	if err != nil {
		return fmt.Errorf("failed to parse template: %v", err)
	}

	var buf bytes.Buffer
	err = tmpl.Execute(&buf, data)
	if err != nil {
		return fmt.Errorf("failed to execute template: %v", err)
	}

	// 写入文件
	filePath := filepath.Join(docsDir, fileName)
	err = os.WriteFile(filePath, buf.Bytes(), 0644)
	if err != nil {
		return fmt.Errorf("failed to write file %s: %v", filePath, err)
	}

	pterm.Info.Printf("generated database design doc: %s\n", filePath)
	return nil
}

// 中文模板
func getDatabaseDesignTemplateZh() string {
	return `# 数据库设计文档

## 概述

本文档描述了基于 protobuf 定义 {{.GoPackage}} 的数据库设计。

**包名**: {{.PackageName}}
**Proto文件**: {{.ProtoFile}}
**Go包路径**: {{.GoPackage}}

## 数据表设计

{{range .Models}}
### {{.Name}}

**表名**: ` + "`" + `{{.TableName}}` + "`" + `
**说明**: {{if .Comment}}{{.Comment}}{{else}}暂无说明{{end}}

#### 字段定义

| 字段名 | 类型 | 说明 | 约束 | 标签 |
|--------|------|------|------|------|
{{range .Fields}}| {{.Name}} | {{.GoType}} | {{if .Comment}}{{.Comment}}{{else}}-{{end}} | {{if .GormTags}}{{.GormTags}}{{else}}-{{end}} | {{if .Tags}}{{.Tags}}{{else}}-{{end}} |
{{end}}

#### 索引设计

{{if .Indexes}}
| 索引名 | 字段 | 类型 | 说明 |
|--------|------|------|------|
{{range .Indexes}}| {{.Name}} | {{.Columns}} | {{.Type}} | {{if .Comment}}{{.Comment}}{{else}}-{{end}} |
{{end}}
{{else}}
暂无索引定义
{{end}}

---

{{end}}

## 生成时间

文档由 codegen 自动生成于 ` + "`" + `{{now}}` + "`" + `

---

*注意：本文档为自动生成，请勿手动编辑。如需更新，请重新运行 codegen gen doc 命令。*
`
}

// 英文模板
func getDatabaseDesignTemplateEn() string {
	return `# Database Design Document

## Overview

This document describes the database design for {{.GoPackage}} based on protobuf definitions.

**Package Name**: {{.PackageName}}
**Proto File**: {{.ProtoFile}}
**Go Package Path**: {{.GoPackage}}

## Database Table Design

{{range .Models}}
### {{.Name}}

**Table Name**: ` + "`" + `{{.TableName}}` + "`" + `
**Description**: {{if .Comment}}{{.Comment}}{{else}}No description available{{end}}

#### Field Definitions

| Field Name | Type | Description | Constraints | Tags |
|------------|------|-------------|-------------|------|
{{range .Fields}}| {{.Name}} | {{.GoType}} | {{if .Comment}}{{.Comment}}{{else}}-{{end}} | {{if .GormTags}}{{.GormTags}}{{else}}-{{end}} | {{if .Tags}}{{.Tags}}{{else}}-{{end}} |
{{end}}

#### Index Design

{{if .Indexes}}
| Index Name | Columns | Type | Description |
|------------|---------|------|-------------|
{{range .Indexes}}| {{.Name}} | {{.Columns}} | {{.Type}} | {{if .Comment}}{{.Comment}}{{else}}-{{end}} |
{{end}}
{{else}}
No index definitions
{{end}}

---

{{end}}

## Generated Time

Document automatically generated by codegen at ` + "`" + `{{now}}` + "`" + `

---

*Note: This document is auto-generated. Do not edit manually. To update, please re-run the codegen gen doc command.*
`
}
